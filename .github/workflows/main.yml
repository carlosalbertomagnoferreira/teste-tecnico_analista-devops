name: CI - IaC - CD
run-name: Executando CI-IaC-CD - ${{ github.run_number }}
on:
  # push:
  #   branches: [ "main" ]
  workflow_dispatch:
    inputs:
      docker-build-push-image:
        description: "Executar build push da imagem docker"
        type: boolean
        default: false

      terraform-apply:
        description: "Executar terraform apply"
        type: boolean
        default: false

      terraform-destroy:
        description: "Executar terraform destroy"
        type: boolean
        default: false
      
      deploy-to-ecs-new-version:
        description: "Deploy nova versao da imagem no ECS"
        type: boolean
        default: false

      deploy-to-k8s:
        description: "Deploy em cluster kubernetes"
        type: boolean
        default: false

env:
  repositorio_nome_imagem: "magnocarlos1988/teste-tecnico_analista-devops"

jobs:
  CI:
    if: inputs.docker-build-push-image == true
    runs-on: ubuntu-latest
    outputs:
      tag-image: ${{ steps.meta.outputs.SHORT_SHA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.repositorio_nome_imagem }}:${{ steps.meta.outputs.SHORT_SHA }}
            ${{ env.repositorio_nome_imagem }}:latest
      
      - name: Docker Scout
        id: docker-scout-environment
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: "${{ env.repositorio_nome_imagem }}:${{ steps.meta.outputs.SHORT_SHA }}"
          organization: ${{ vars.DOCKERHUB_USERNAME }}

  IaC-Terraform:
    if: ${{ always() }}
    needs: CI
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Muda vers√£o da imagem para deploy
        run: sed -i 's/latest/${{ needs.CI.outputs.tag-image }}/g' task-definitions/task.json
        if: inputs.docker-build-push-image == true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan Apply
        run: terraform plan -out=tfplan.tfout
        if: inputs.terraform-apply == true

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan.tfout
        if: inputs.terraform-apply == true

      - name: Terraform Plan Destroy
        run: terraform plan -destroy -out=tfplandestroy
        if: inputs.terraform-destroy == true

      - name: Terraform Destroy
        run: terraform apply -destroy -auto-approve tfplandestroy
        if: inputs.terraform-destroy == true

  CD-ECS:
    if: ${{ always() }}
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to ECS
        if: inputs.deploy-to-ecs-new-version == true
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.4.0
        with:
          task-definition: ./terraform/task-definitions/task.json
          cluster: teste-devops
          service: service-test-devops

  CD-K8S:
    if: ${{ always() }}
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure kubeconfig
        id: setcontext
        uses: azure/k8s-set-context@v4.0.1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to K8S
        uses: Azure/k8s-deploy@v5.0.4
        with:
          namespace: 'myapp'
          manifests: |
            ./k8s/deploy_svc.yaml
          images: ${{ env.repositorio_nome_imagem }}:${{ needs.CI.outputs.tag-image }}
